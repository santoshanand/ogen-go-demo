// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// DeletePetParams is parameters of deletePet operation.
type DeletePetParams struct {
	// Pet id to delete.
	PetId int64
}

func unpackDeletePetParams(packed map[string]any) (params DeletePetParams) {
	params.PetId = packed["petId"].(int64)
	return params
}

func decodeDeletePetParams(args [1]string, r *http.Request) (params DeletePetParams, _ error) {
	// Decode path: petId.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "petId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PetId = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: petId: parse")
			}
		} else {
			return params, errors.New("path: petId: not specified")
		}
	}
	return params, nil
}

// GetPetByIdParams is parameters of getPetById operation.
type GetPetByIdParams struct {
	// ID of pet to return.
	PetId int64
}

func unpackGetPetByIdParams(packed map[string]any) (params GetPetByIdParams) {
	params.PetId = packed["petId"].(int64)
	return params
}

func decodeGetPetByIdParams(args [1]string, r *http.Request) (params GetPetByIdParams, _ error) {
	// Decode path: petId.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "petId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PetId = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: petId: parse")
			}
		} else {
			return params, errors.New("path: petId: not specified")
		}
	}
	return params, nil
}

// UpdatePetParams is parameters of updatePet operation.
type UpdatePetParams struct {
	// ID of pet that needs to be updated.
	PetId int64
	// Name of pet that needs to be updated.
	Name OptString
	// Status of pet that needs to be updated.
	Status OptPetStatus
}

func unpackUpdatePetParams(packed map[string]any) (params UpdatePetParams) {
	params.PetId = packed["petId"].(int64)
	if v, ok := packed["name"]; ok {
		params.Name = v.(OptString)
	}
	if v, ok := packed["status"]; ok {
		params.Status = v.(OptPetStatus)
	}
	return params
}

func decodeUpdatePetParams(args [1]string, r *http.Request) (params UpdatePetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: petId.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "petId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PetId = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: petId: parse")
			}
		} else {
			return params, errors.New("path: petId: not specified")
		}
	}
	// Decode query: name.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name.SetTo(paramsDotNameVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: name: parse")
			}
		}
	}
	// Decode query: status.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal PetStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = PetStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: status: parse")
			}
			if err := func() error {
				if params.Status.Set {
					if err := func() error {
						if err := params.Status.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: status: invalid")
			}
		}
	}
	return params, nil
}
